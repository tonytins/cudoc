@page "/comic/{Id}"
@page "/comics/{Id}"
@inject HttpClient _client
@try
{
    @if (!IsFinished)
    {
        <LoadingBar />
    }
    else
    {
        <DynMeta Previous="Comics" Name="@Volume" Heading="false" />
        <div align="center" class="submission">
            <img src="/images/comics/@Filename" /><br />
            <div class="row">
                <div class="column">
                    @if (Previous is not 0)
                    {
                        <h3><a href="/comic/@Previous"><FontAwesome Icon="circle-arrow-left" /></a> Previous</h3>


                    }
                </div>
                <div class="column"><h3>@Volume</h3></div>
                <div class="column">
                    @if (Next is not 0)
                    {
                        <h3>Next <a href="/comic/@Next"> <FontAwesome Icon="circle-arrow-right" /></a></h3>

                    }
                </div>
            </div>

        </div>
    }
}
catch
{
    <NotFound />
}
@code {
    /// <summary>
    /// The ID of the comic to retrieve.
    /// </summary>
    [Parameter, EditorRequired]
    public string Id { get; set; } = string.Empty;

    /// <summary>
    /// The filename of the comic.
    /// </summary>
    private string Filename { get; set; } = string.Empty;

    /// <summary>
    /// The Volume of the comic.
    /// </summary>
    private string Volume { get; set; } = string.Empty;

    /// <summary>
    /// The current page number of the comic.
    /// </summary>
    private int Previous { get; set; } = 0;

    /// <summary>
    /// The last page number of the comic.
    /// </summary>
    private int Next { get; set; } = 0;

    /// <summary>
    /// A flag indicating whether the comic has finished loading or not.
    /// </summary>
    private bool IsFinished { get; set; } = false;

    /// <summary>
    /// Sets the parameter values and loads the comic data.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var file = await _client.GetStreamAsync(GlobalConsts.COMIC_CSV);
            var csv = ComicDB.Reader(file, int.Parse(Id));

            // Set the Filename and Volume properties using the CSV data
            Filename = csv.Filename;
            Volume = csv.Volume;
            Previous = csv.Previous;
            Next = csv.Next;

            // Mark the comic as finished loading
            IsFinished = true;
        }
        catch (Exception err)
        {
            throw new Exception(err.Message);
        }
    }

}

