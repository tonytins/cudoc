@page "/v/{Id}"
@page "/view/{Id}"
@page "/{Path}/{Id}"
@page "/v/{Path}/{Id}"
@inject HttpClient _client
@using System.Net
@using System.Text.RegularExpressions
@* Displays an image or markdown file based on the file extension and provides a link to the page where the file was found. *@
@try
{
    @if (!IsReady)
    {

        <LoadingBar />
    }
    else
    {
        @if (Path.Contains("stories"))
        {
            <DynMeta Authors="@Authors" PreviousPage="@PathTitle" Name="@Title" />
            <div class="story">
                <p>
                    @Markdown.MarkdownToHtml()
                </p>
            </div>
        }
        else
        {
            <DynMeta PreviousPage="@PathTitle" Name="@Title" />
            <div align="center" class="submission">
                <img src="/images/@Path/@Filename" />
                @if (!string.IsNullOrEmpty(Copyright))
                {
                    <div><FontAwesome Regular="true" Icon="copyright" /> @Copyright</div>
                }
            </div>
        }
        <p align="center">
            Return to <a href="/@Path">@PathTitle</a> page
        </p>
    }
}
catch
{
    <NotFound Message="@ErrorMessage" />
}

@code {

    /// <summary>
    /// The unique identifier for the gallery item being displayed.
    /// </summary>
    [Parameter, EditorRequired] public string Id { get; set; } = string.Empty;

    /// <summary>
    /// The path of the gallery item being displayed.
    /// </summary>
    [Parameter] public string Path { get; set; } = "gallery";

    /// <summary>
    /// The name of the file being displayed.
    /// </summary>
    string Filename { get; set; } = string.Empty;

    /// <summary>
    /// The title of the gallery item being displayed.
    /// </summary>
    string Title { get; set; } = string.Empty;

    /// <summary>
    /// The markdown content of the gallery item being displayed.
    /// </summary>
    string Markdown { get; set; } = string.Empty;

    /// <summary>
    /// Indicates whether the gallery item has finished loading.
    /// </summary>
    bool IsReady { get; set; } = false;

    string Authors { get; set; } = string.Empty;

    string Copyright { get; set; } = string.Empty;

    /// <summary>
    /// The error message that occurred while loading the gallery item.
    /// </summary>
    string ErrorMessage { get; set; } = string.Empty;

    /// <summary>
    /// The title of the path being displayed.
    /// </summary>
    string PathTitle { get; set; } = string.Empty;

    /// <summary>
    /// This method overrides the OnParametersSetAsync method to set properties for a gallery item. It retrieves a CSV file from the server and retrieves the data for the requested gallery item. If a markdown file exists, it loads the markdown content. Finally, it sets a flag indicating that the page is finished loading.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Get the CSV file from the server and retrieve the data for the requested item.
            Stream file;
            if (Path.Contains("animations") || Path.Contains("videos"))
                file = await _client.GetStreamAsync(GlobalConsts.ANIMATIONS_CSV);
            else
                file = await _client.GetStreamAsync(GlobalConsts.GALLERY_CSV);

            // var file = await _client.GetStreamAsync(GlobalConsts.GALLERY_CSV);
            var csv = GalleryDB.Reader(file, int.Parse(Id));

            // Convert the path to title case for displaying on the page.
            var culture = new CultureInfo("en-US", false);
            var txtInfo = culture.TextInfo;
            Path = csv.Path;
            PathTitle = txtInfo.ToTitleCase(Path);

            // Set the filename and load the markdown content if it exists.
            Filename = csv.Filename;
            if (Path.Contains("stories"))
            {
                var mdfile = _client.GetStringAsync($"{csv.Path}/{csv.Filename}");
                var mdContent = await mdfile;
                var metadata = mdContent.GetFrontMatter<Story>();
                Markdown = mdContent;
                Authors = !string.IsNullOrEmpty(metadata.Authors) ? metadata.Authors : Authors;
            }

            // Determine the page title, which is either the title in the CSV file or the filename with some
            // transformations applied to make it more readable.
            switch (string.IsNullOrWhiteSpace(csv.Title))
            {
                case true:
                    var oldName = Filename;
                    var zFullname = "Zack";

                    oldName = Regex.Replace(oldName, @"\.(png|jpg|gif|md)$", string.Empty, RegexOptions.IgnoreCase);
                    oldName = oldName.Replace("_zc", $" {zFullname}", StringComparison.InvariantCultureIgnoreCase)
                        .Replace("zc_", $"{zFullname} ", StringComparison.InvariantCultureIgnoreCase)
                        .Replace("zs", $"Z's", StringComparison.InvariantCultureIgnoreCase)
                        .Replace("_", " ");

                    Title = txtInfo.ToTitleCase(oldName);
                    break;
                case false:
                    Title = csv.Title;
                    break;
            }

            switch (Path.Contains("gallery"))
            {
                case true:
                    break;
                case false:
                    // Determine copyright information for non-gallery items.
                    var copyright = string.Empty;

                    // Baby bye bye bye!
                    switch (true)
                    {
                        case true when Title.Contains("By"):
                            {
                                copyright = Title.Split("By").Last();
                                Title = Title.Split("By").First();
                                break;
                            }
                        case true when Title.Contains("by"):
                            {
                                copyright = Title.Split("by").Last();
                                Title = Title.Split("by").First();
                            }
                            break;
                    }

                    Copyright = copyright;
                    break;
            }

            // Set the flag indicating that the page is finished loading.
            IsReady = true;
        }
        catch (WebException err)
        {
            // If an error occurs, throw an exception to display the "Not Found" page.
            ErrorMessage = err.Message;
        }
    }
}

