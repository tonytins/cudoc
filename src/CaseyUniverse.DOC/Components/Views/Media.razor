@page "/v/{Id}"
@page "/view/{Id}"
@page "/{Path}/{Id}"
@page "/v/{Path}/{Id}"
@inject HttpClient http
@using System.Text.RegularExpressions
@* Displays an image or markdown file based on the file extension and provides a link to the page where the file was found. *@
@if (!IsReady)
{

    <LoadingBar />
}
else
{
    @if (Path.Contains("stories"))
    {
        <DynMeta Authors="@Authors" Previous="@PathTitle" Name="@Title" />
        <div class="story">
            <p>
                @Markdown.MarkdownToHtml()
            </p>
        </div>
    }
    else
    {
        <DynMeta Previous="@PathTitle" Name="@Title" />
        <div align="center" class="submission">
            <DynImg Source="@ImagePath" />
            @if (string.IsNullOrEmpty(Copyright))
            {
                <div><FontAwesome Brand="true" Icon="creative-commons" /> <FontAwesome Brand="true" Icon="creative-commons-zero" /></div>
            }
            else
            {
                <div><FontAwesome Regular="true" Icon="copyright" /> @Copyright</div>
            }
        </div>
    }

    @if (string.IsNullOrEmpty(Previous))
    {
        <p align="center">
            <FontAwesome Icon="arrow-left" /> Return to the <a href="/@Path">@PathTitle.ToLowerInvariant()</a> page.
        </p>
    }
    else if (Previous.Contains("home") || Previous.Contains("index"))
    {
        <p align="center">
            <FontAwesome Icon="arrow-left" /> Return to the <a href="/">homepage</a>.
        </p>
    }
    else
    {
        <p align="center">
            <FontAwesome Icon="arrow-left" /> Return to the <a href="/@Previous">previous</a> page.
        </p>
    }
}

@code {

    /// <summary>
    /// The unique identifier for the gallery item being displayed.
    /// </summary>
    [Parameter, EditorRequired] public string Id { get; set; } = string.Empty;

    /// <summary>
    /// The path of the gallery item being displayed.
    /// </summary>
    [Parameter] public string Path { get; set; } = "gallery";

    [Parameter, SupplyParameterFromQuery] public string Previous { get; set; } = string.Empty;

    /// <summary>
    /// The name of the file being displayed.
    /// </summary>
    string Filename { get; set; } = string.Empty;

    /// <summary>
    /// The title of the gallery item being displayed.
    /// </summary>
    string Title { get; set; } = string.Empty;

    /// <summary>
    /// The markdown content of the gallery item being displayed.
    /// </summary>
    string Markdown { get; set; } = string.Empty;

    /// <summary>
    /// Indicates whether the gallery item has finished loading.
    /// </summary>
    bool IsReady { get; set; } = false;

    string Authors { get; set; } = string.Empty;

    string Copyright { get; set; } = string.Empty;

    /// <summary>
    /// The error message that occurred while loading the gallery item.
    /// </summary>
    string ErrorMessage { get; set; } = string.Empty;

    /// <summary>
    /// The title of the path being displayed.
    /// </summary>
    string PathTitle { get; set; } = string.Empty;

    string ImagePath { get; set; } = string.Empty;

    /// <summary>
    /// This method overrides the OnParametersSetAsync method to set properties for a gallery item. It retrieves a CSV file from the server and retrieves the data for the requested gallery item. If a markdown file exists, it loads the markdown content. Finally, it sets a flag indicating that the page is finished loading.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Get the CSV file from the server and retrieve the data for the requested item.
        Stream file;

        if (Path.Contains("animations") || Path.Contains("videos"))
            file = await http.GetStreamAsync(GlobalConsts.ANIMATIONS_CSV);
        else
            file = await http.GetStreamAsync(GlobalConsts.GALLERY_CSV);

        // var file = await http.GetStreamAsync(GlobalConsts.GALLERY_CSV);
        var csv = GalleryDB.Reader(file, int.Parse(Id));

        // Convert the path to title case for displaying on the page.
        var culture = new CultureInfo("en-US", false);
        var txtInfo = culture.TextInfo;

        Path = csv.Path;
        PathTitle = txtInfo.ToTitleCase(Path);

        // Set the filename and load the markdown content if it exists.
        Filename = csv.Filename;
        if (Path.Contains("stories"))
        {
            var mdContent = await http.GetStringAsync($"{csv.Path}/{csv.Filename}");

            var metadata = mdContent.GetFrontMatter<Story>();
            Markdown = mdContent;
            Authors = !string.IsNullOrEmpty(metadata.Authors) ? metadata.Authors : Authors;
        }
        else
            ImagePath = $"{csv.Path}/{csv.Filename}";


        // Determine the page title, which is either the title in the CSV file or the filename with some
        // transformations applied to make it more readable.
        switch (string.IsNullOrWhiteSpace(csv.Title))
        {
            case true:
                var oldName = Filename;
                var zFullname = "Zack";

                oldName = Regex.Replace(oldName, @"\.(png|jpg|gif|md)$",
                    string.Empty, RegexOptions.IgnoreCase);
                oldName = oldName.Replace("_zc", $" {zFullname}", StringComparison.InvariantCultureIgnoreCase)
                    .Replace("zc_", $"{zFullname} ", StringComparison.InvariantCultureIgnoreCase)
                    .Replace("zs", $"Z's", StringComparison.InvariantCultureIgnoreCase)
                    .Replace("_", " ");

                Title = txtInfo.ToTitleCase(oldName);
                break;
            case false:
                Title = csv.Title;
                break;
        }

        switch (Path.Contains("gifts") || Path.Contains("wallpaper"))
        {
            // Baby, bye bye bye!
            case true when Title.Contains("By", StringComparison.InvariantCultureIgnoreCase):
                Copyright = Regex.Split(Title, "By", RegexOptions.IgnoreCase).Last();
                Title = Regex.Split(Title, "By", RegexOptions.IgnoreCase).First();
                break;
            case true when Title.Contains("©"):
                Copyright = Title.Split("©").Last();
                Title = Title.Split("©").First();
                break;
        }

        // Set the flag indicating that the page is finished loading.
        IsReady = true;
    }
}

