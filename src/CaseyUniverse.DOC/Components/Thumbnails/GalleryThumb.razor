@inject HttpClient _client
<a href="@MediaPage"><img src="/images/@PhysicalPath/@Source" width="@Width" /></a>

@code {
    /// <summary>
    /// The source of the image file.
    /// </summary>
    [Parameter, EditorRequired] public string Source { get; set; } = string.Empty;

    /// <summary>
    /// The width of the image.
    /// </summary>
    [Parameter] public int Width { get; set; } = ThumbWidth.SMALL;

    /// <summary>
    /// The alignment of the image.
    /// </summary>
    [Parameter] public string Align { get; set; } = string.Empty;

    [Parameter] public string CurrentPage { get; set; } = string.Empty;

    /// <summary>
    /// The path of the image file.
    /// </summary>
    [Parameter] public string Path { get; set; } = string.Empty;

    string PhysicalPath { get; set; } = string.Empty;
    string MediaPage { get; set; } = string.Empty;
    string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Obtain the CSV file containing the image path and ID
            var file = await _client.GetStreamAsync(GlobalConsts.GALLERY_CSV);

            // Read the CSV file to obtain the image path and ID
            var csv = GalleryDB.Reader(file, Source);


            // Assign the obtained image path and ID to the corresponding properties
            if (string.IsNullOrEmpty(Path))
                Path = csv.Path;

            PhysicalPath = csv.Path;
            Id = csv.Id.ToString();

            if (string.IsNullOrEmpty(CurrentPage))
                MediaPage = $"/{Path}/{Id}";
            else
                MediaPage = $"/{Path}/{Id}?previous={CurrentPage}";

        }
        catch (Exception err)
        {
            // Throw an exception if an error occurs while obtaining the image path and ID
            throw new Exception(err.Message);
        }
    }
}
